// Prisma schema for SkillBridge MVP (PostgreSQL for production)

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserType {
  newcomer
  mentor
  client
  admin
}

enum ProjectStatus {
  open
  in_progress
  completed
  cancelled
}

enum ApplicationStatus {
  pending
  accepted
  rejected
}

enum SessionStatus {
  scheduled
  completed
  cancelled
}

enum NotificationType {
  project
  payment
  achievement
  message
  reminder
  system
}

enum TransactionType {
  income
  withdrawal
  refund
}

enum TransactionStatus {
  pending
  completed
  failed
}

// Models
model User {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  fullName        String
  userType        UserType
  avatarUrl       String?
  bio             String?
  experienceLevel String?
  skills          String    @default("[]")
  emailVerified   Boolean   @default(false)
  verificationToken String? @unique
  verificationTokenExpires DateTime?
  lastSeen        DateTime?
  createdAt       DateTime  @default(now())
  
  // Relations
  projects        Project[]     @relation("ClientProjects")
  applications   Application[]
  sessions       Session[]     @relation("UserSessions")
  mentorSessions Session[]     @relation("MentorSessions")
  reviews        Review[]      @relation("ReviewedUser")
  reviewerReviews Review[]     @relation("ReviewerUser")
  
  // New relations
  portfolioProjects PortfolioProject[]
  portfolioSkills   PortfolioSkill[]
  sentMessages      Message[]         @relation("MessageSender")
  receivedMessages  Message[]         @relation("MessageRecipient")
  conversations1    Conversation[]    @relation("ConversationParticipant1")
  conversations2    Conversation[]    @relation("ConversationParticipant2")
  notifications     Notification[]    @relation("UserNotifications")
  sentNotifications Notification[]    @relation("NotificationSender")
  transactions     Transaction[]
  notificationSettings UserNotificationSettings?
  userAchievements UserAchievement[]
  userLevel        UserLevel?
}

model Project {
  id              String        @id @default(uuid())
  title           String
  description     String
  projectType     String
  requiredSkills  String        @default("[]")
  budgetMin       Int
  budgetMax       Int
  durationWeeks  Int
  difficultyLevel String
  status          ProjectStatus @default(open)
  clientId        String
  client          User          @relation("ClientProjects", fields: [clientId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  applications    Application[]
}

model Application {
  id                String            @id @default(uuid())
  projectId         String
  project           Project           @relation(fields: [projectId], references: [id])
  userId            String
  user              User              @relation(fields: [userId], references: [id])
  coverLetter       String
  proposedTimeline  Int
  status            ApplicationStatus @default(pending)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

model Session {
  id          String        @id @default(uuid())
  mentorId    String
  mentor      User          @relation("MentorSessions", fields: [mentorId], references: [id])
  userId      String
  user        User          @relation("UserSessions", fields: [userId], references: [id])
  startTime   DateTime
  endTime     DateTime
  status      SessionStatus @default(scheduled)
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model Review {
  id          String   @id @default(uuid())
  reviewerId  String
  reviewer    User     @relation("ReviewerUser", fields: [reviewerId], references: [id])
  reviewedId  String
  reviewed    User     @relation("ReviewedUser", fields: [reviewedId], references: [id])
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
}

// New models for portfolio
model PortfolioProject {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  title       String
  description String
  image       String?
  category    String
  skills      String   @default("[]") // JSON array of skills
  budget      Int?
  duration    String?
  rating      Float?
  reviews     Int      @default(0)
  views       Int      @default(0)
  likes       Int      @default(0)
  status      String   @default("completed") // completed, in-progress, planned
  client      String?
  completionDate DateTime?
  tags        String   @default("[]") // JSON array of tags
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  transactions Transaction[]
}

model PortfolioSkill {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  name        String
  level       Int      // 0-100
  experience  String   // e.g., "3 years"
  projects    Int      @default(0)
  category    String   // frontend, backend, mobile, design, other
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New models for messaging
model Conversation {
  id              String   @id @default(uuid())
  participant1Id  String
  participant1    User     @relation("ConversationParticipant1", fields: [participant1Id], references: [id])
  participant2Id  String
  participant2    User     @relation("ConversationParticipant2", fields: [participant2Id], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  messages        Message[]
}

model Message {
  id             String   @id @default(uuid())
  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  senderId       String
  sender         User     @relation("MessageSender", fields: [senderId], references: [id])
  recipientId    String
  recipient      User     @relation("MessageRecipient", fields: [recipientId], references: [id])
  content        String
  type           String   @default("text") // text, image, file
  isRead         Boolean  @default(false)
  readAt         DateTime?
  createdAt      DateTime @default(now())
}

// New models for notifications
model Notification {
  id          String           @id @default(uuid())
  userId      String
  user        User             @relation("UserNotifications", fields: [userId], references: [id])
  type        NotificationType
  title       String
  message     String
  isRead      Boolean          @default(false)
  isImportant Boolean          @default(false)
  readAt      DateTime?
  senderId    String?
  sender      User?            @relation("NotificationSender", fields: [senderId], references: [id])
  metadata    String?          // JSON string for additional data
  createdAt   DateTime         @default(now())
}

model UserNotificationSettings {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  email       Boolean  @default(true)
  push        Boolean  @default(true)
  sms         Boolean  @default(false)
  project     Boolean  @default(true)
  payment     Boolean  @default(true)
  achievement Boolean  @default(true)
  message     Boolean  @default(true)
  reminder    Boolean  @default(true)
  system      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// New models for earnings/transactions
model Transaction {
  id          String            @id @default(uuid())
  userId      String
  user        User              @relation(fields: [userId], references: [id])
  type        TransactionType
  amount      Int
  description String
  projectId   String?
  project     PortfolioProject? @relation(fields: [projectId], references: [id])
  status      TransactionStatus @default(completed)
  metadata    String?           // JSON string for additional data
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

// New models for achievements
model Achievement {
  id          String   @id @default(uuid())
  title       String
  description String
  points      Int      @default(10)
  icon        String?
  category    String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  
  // Relations
  userAchievements UserAchievement[]
}

model UserAchievement {
  id             String   @id @default(uuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  achievementId  String
  achievement    Achievement @relation(fields: [achievementId], references: [id])
  progress       Int      @default(0) // 0-100
  unlockedAt     DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  
  @@unique([userId, achievementId])
}

model UserLevel {
  id          String   @id @default(uuid())
  userId      String   @unique
  user        User     @relation(fields: [userId], references: [id])
  level       Int      @default(1)
  totalPoints Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Level {
  id             String   @id @default(uuid())
  level          Int      @unique
  title          String
  description    String
  requiredPoints Int      @default(0)
  createdAt      DateTime @default(now())
}

// Newsletter subscriptions
model NewsletterSubscription {
  id           String   @id @default(uuid())
  email        String   @unique
  consent      Boolean  @default(true)
  subscribedAt DateTime @default(now())
  isActive     Boolean  @default(true)
  unsubscribedAt DateTime?
  updatedAt    DateTime @updatedAt
}

