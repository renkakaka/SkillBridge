import nodemailer from 'nodemailer'
import { emailConfig } from './emailConfig'
import { emailTemplates } from './emailTemplates'

// –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä –¥–ª—è SMTP —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
const createTransporter = () => {
  const config = {
    host: emailConfig.smtp.host,
    port: emailConfig.smtp.port,
    secure: emailConfig.smtp.secure,
    auth: {
      user: emailConfig.smtp.user,
      pass: emailConfig.smtp.pass,
    },
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
    tls: {
      rejectUnauthorized: false
    },
    connectionTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
    greetingTimeout: 15000,   // 15 —Å–µ–∫—É–Ω–¥
    socketTimeout: 30000,     // 30 —Å–µ–∫—É–Ω–¥
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É–ª–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
    pool: true,
    maxConnections: 5,
    maxMessages: 100,
    rateLimit: 14,
  }
  
  console.log('Creating optimized SMTP transporter with config:', {
    host: config.host,
    port: config.port,
    secure: config.secure,
    user: config.auth.user,
    pass: config.auth.pass ? '***' : 'undefined',
    pool: config.pool,
    maxConnections: config.maxConnections
  })
  
  return nodemailer.createTransport(config)
}

export async function sendVerificationEmail(email: string, token: string, name: string) {
  try {
    console.log(`üöÄ Sending beautiful verification email to: ${email}`)
    console.log(`Using optimized email config:`, {
      host: emailConfig.smtp.host,
      port: emailConfig.smtp.port,
      fromEmail: emailConfig.from.email,
      fromName: emailConfig.from.name
    })
    
    const verificationUrl = `${emailConfig.app.url}/auth/verify-email?token=${token}`
    console.log(`‚ú® Verification URL: ${verificationUrl}`)
    
    const transporter = createTransporter()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–±—ã—Å—Ç—Ä–æ)
    console.log('üîç Verifying SMTP connection...')
    try {
      await transporter.verify()
      console.log('‚úÖ SMTP connection verified successfully')
    } catch (verifyError) {
      console.error('‚ö†Ô∏è SMTP verification failed:', verifyError)
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–∂–µ –µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π HTML —à–∞–±–ª–æ–Ω –Ω–∞ –∞—Ä–º—è–Ω—Å–∫–æ–º —è–∑—ã–∫–µ
    const htmlContent = emailTemplates.verificationEmail(
      name, 
      verificationUrl, 
      emailConfig.app.nameHy || emailConfig.app.name
    )
    
    const mailOptions = {
      from: `"${emailConfig.from.name}" <${emailConfig.from.email}>`,
      to: email,
      subject: `’Ä’°’Ω’ø’°’ø’•÷Ñ ’±’•÷Ä ${emailConfig.app.nameHy || emailConfig.app.name} ’∞’°’∑’´’æ’® ‚ú®`,
      html: htmlContent,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
      headers: {
        'X-Priority': '1',
        'X-MSMail-Priority': 'High',
        'Importance': 'high',
        'X-Mailer': 'SkillBridge Email System'
      }
    }
    
    console.log('üìß Sending beautiful email with options:', {
      from: mailOptions.from,
      to: mailOptions.to,
      subject: mailOptions.subject
    })
    
    const result = await transporter.sendMail(mailOptions)
    console.log('üéâ Beautiful verification email sent successfully:', result.messageId)
    
    return result
  } catch (error) {
    console.error('‚ùå Detailed error in sendVerificationEmail:', error)
    console.error('Error stack:', error instanceof Error ? error.stack : 'No stack trace')
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –Ω–∞ –∞—Ä–º—è–Ω—Å–∫–æ–º —è–∑—ã–∫–µ
    if (error instanceof Error) {
      if (error.message.includes('Invalid login')) {
        throw new Error('Gmail-’´ ’∞’°’æ’°’Ω’ø’°’£÷Ä’¥’°’∂ ’Ω’≠’°’¨: ’ç’ø’∏÷Ç’£’•÷Ñ ’±’•÷Ä email-’® ÷á ’∞’°’æ’•’¨’æ’°’Æ’´ ’£’°’≤’ø’∂’°’¢’°’º’®')
      } else if (error.message.includes('Connection timeout')) {
        throw new Error('Gmail-’´ ’Ø’°’∫’´ ’™’°’¥’°’∂’°’Ø’°’∞’°’ø’æ’°’Æ’® ’¨÷Ä’°÷Å’•’¨ ’ß: ’ç’ø’∏÷Ç’£’•÷Ñ ’±’•÷Ä ’´’∂’ø’•÷Ä’∂’•’ø ’Ø’°’∫’®')
      } else if (error.message.includes('Authentication failed')) {
        throw new Error('Gmail-’´ ’∞’°’æ’°’Ω’ø’°’£÷Ä’¥’°’∂ ’Ω’≠’°’¨: ’Ä’°’¥’∏’¶’æ’•÷Ñ, ’∏÷Ä 2FA-’∂ ’¥’´’°÷Å’æ’°’Æ ’ß ÷á ’∞’°’æ’•’¨’æ’°’Æ’´ ’£’°’≤’ø’∂’°’¢’°’º’® ’≥’´’∑’ø ’ß')
      }
    }
    
    throw new Error(`Email ’∞’°’Ω’ø’°’ø’¥’°’∂ ’∂’°’¥’°’Ø ’∏÷Ç’≤’°÷Ä’Ø’•’¨’∏÷Ç ’Ω’≠’°’¨: ${error instanceof Error ? error.message : '‘±’∂’∞’°’µ’ø ’Ω’≠’°’¨'}`)
  }
}

export async function sendPasswordResetEmail(email: string, token: string, name: string) {
  try {
    console.log(`üîê Sending beautiful password reset email to: ${email}`)
    
    const resetUrl = `${emailConfig.app.url}/auth/reset-password/confirm?token=${token}`
    console.log(`üîë Reset URL: ${resetUrl}`)
    
    const transporter = createTransporter()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–±—ã—Å—Ç—Ä–æ)
    try {
      await transporter.verify()
    } catch (verifyError) {
      console.error('‚ö†Ô∏è SMTP verification failed:', verifyError)
    }
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π HTML —à–∞–±–ª–æ–Ω –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è –Ω–∞ –∞—Ä–º—è–Ω—Å–∫–æ–º —è–∑—ã–∫–µ
    const htmlContent = emailTemplates.passwordResetEmail(
      name, 
      resetUrl, 
      emailConfig.app.nameHy || emailConfig.app.name
    )
    
    const mailOptions = {
      from: `"${emailConfig.from.name}" <${emailConfig.from.email}>`,
      to: email,
      subject: `’é’•÷Ä’°’Ø’°’µ’•÷Ñ ’±’•÷Ä ${emailConfig.app.nameHy || emailConfig.app.name} ’£’°’≤’ø’∂’°’¢’°’º’® üîê`,
      html: htmlContent,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
      headers: {
        'X-Priority': '1',
        'X-MSMail-Priority': 'High',
        'Importance': 'high',
        'X-Mailer': 'SkillBridge Email System'
      }
    }
    
    const result = await transporter.sendMail(mailOptions)
    console.log('üéâ Beautiful password reset email sent successfully:', result.messageId)
    
    return result
  } catch (error) {
    console.error('‚ùå Detailed error in sendPasswordResetEmail:', error)
    throw new Error(`‘≥’°’≤’ø’∂’°’¢’°’º ’æ’•÷Ä’°’Ø’°’µ’•’¨’∏÷Ç email ’∏÷Ç’≤’°÷Ä’Ø’•’¨’∏÷Ç ’Ω’≠’°’¨: ${error instanceof Error ? error.message : '‘±’∂’∞’°’µ’ø ’Ω’≠’°’¨'}`)
  }
}

export async function sendWelcomeEmail(email: string, name: string) {
  try {
    console.log(`üéâ Sending beautiful welcome email to: ${email}`)
    
    const transporter = createTransporter()
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π HTML —à–∞–±–ª–æ–Ω –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞ –∞—Ä–º—è–Ω—Å–∫–æ–º —è–∑—ã–∫–µ
    const htmlContent = emailTemplates.welcomeEmail(
      name, 
      emailConfig.app.nameHy || emailConfig.app.name
    )
    
    const mailOptions = {
      from: `"${emailConfig.from.name}" <${emailConfig.from.email}>`,
      to: email,
      subject: `‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø ${emailConfig.app.nameHy || emailConfig.app.name}! üéâ`,
      html: htmlContent,
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏
      headers: {
        'X-Priority': '1',
        'X-MSMail-Priority': 'High',
        'Importance': 'high',
        'X-Mailer': 'SkillBridge Email System'
      }
    }
    
    const result = await transporter.sendMail(mailOptions)
    console.log('üéâ Beautiful welcome email sent successfully:', result.messageId)
    
    return result
  } catch (error) {
    console.error('‚ùå Detailed error in sendWelcomeEmail:', error)
    throw new Error(`‘≤’°÷Ä’´ ’£’°’¨’∏÷Ç’Ω’ø email ’∏÷Ç’≤’°÷Ä’Ø’•’¨’∏÷Ç ’Ω’≠’°’¨: ${error instanceof Error ? error.message : '‘±’∂’∞’°’µ’ø ’Ω’≠’°’¨'}`)
  }
}
