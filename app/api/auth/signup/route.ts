import { NextRequest, NextResponse } from 'next/server'
import prisma from '@/lib/prisma'
import bcrypt from 'bcryptjs'
import { rateLimit } from '@/lib/rateLimit'
import { signupSchema } from '@/lib/validations'
import { sendVerificationEmail, sendWelcomeEmail } from '@/lib/email'

export async function POST(req: NextRequest) {
  try {
    const rl = await rateLimit(req.headers, { id: 'auth:signup', limit: 5, windowMs: 300_000 })
    if (!rl.allowed) {
      return NextResponse.json({ error: 'Too many requests' }, { status: 429 })
    }

    const body = await req.json()
    const parsed = signupSchema.safeParse(body)
    
    if (!parsed.success) {
      return NextResponse.json({ 
        error: 'Invalid data', 
        details: parsed.error.errors 
      }, { status: 400 })
    }

    const { email, password, fullName, userType } = parsed.data

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
    const existingUser = await prisma.user.findUnique({
      where: { email }
    })

    if (existingUser) {
      return NextResponse.json({ error: 'User with this email already exists' }, { status: 409 })
    }

    // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(password, 12)

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ email
    const verificationToken = crypto.randomUUID()
    const verificationTokenExpires = new Date(Date.now() + 24 * 60 * 60 * 1000) // 24 —á–∞—Å–∞

    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await prisma.user.create({
      data: {
        email,
        password: hashedPassword,
        fullName,
        userType,
        verificationToken,
        verificationTokenExpires,
        emailVerified: false,
        skills: '[]',
        lastSeen: new Date(),
      }
    })

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    await prisma.userNotificationSettings.create({
      data: {
        userId: user.id,
      }
    })

    // –°–æ–∑–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await prisma.userLevel.create({
      data: {
        userId: user.id,
        level: 1,
        totalPoints: 0,
      }
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º email –¥–ª—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    try {
      console.log('üìß Sending verification email...')
      await sendVerificationEmail(email, verificationToken, fullName)
      console.log('‚úÖ Verification email sent successfully')
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π email
      console.log('üéâ Sending welcome email...')
      await sendWelcomeEmail(email, fullName)
      console.log('‚úÖ Welcome email sent successfully')
      
    } catch (emailError) {
      console.error('‚ùå Failed to send emails:', emailError)
      // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é, –µ—Å–ª–∏ email –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª—Å—è
    }

    // –£–±–∏—Ä–∞–µ–º —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const { password: _, verificationToken: __, verificationTokenExpires: ___, ...userWithoutSensitiveData } = user as any

    return NextResponse.json({
      user: userWithoutSensitiveData,
      message: 'User registered successfully. Please check your email to verify your account.'
    }, { status: 201 })

  } catch (e: unknown) {
    console.error('Signup error:', e)
    const message = e instanceof Error ? e.message : 'Unknown error occurred'
    return NextResponse.json({ error: message }, { status: 500 })
  }
}
